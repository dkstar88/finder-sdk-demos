光速搜索开发接口 Finder Development Interface
============================

摘要:
-----
本文档描述了finderlib.dll提供的开发接口，可用函数，参数的描述，以及一些使用案例。

函数列表
------
* [FindA / FindW](#finder)
* [LaunchFinder](#launchfinder)
* [IsFinderRunning](#isfinderrunning)
* [CheckRequirement](#checkrequirement)

<a id="finder"></a>
Find
=====

回调函数：
---------

  由调用方传入，搜索有结果返回时会被调用
  TResultCallBack = procedure(Buffer: PPChar; BufferCount: Integer; TotalCount: Integer;
    ErrorCode: Integer); stdcall;
	

Buffer: PPChar;					包含每个文件名的数组

BufferCount: Integer；			此次返回的(Buffer)文件名个数

TotalCount: Integer;			搜索结果总数

ErrorCode: Integer				错误代码 （0=无错，<> 0 有错）

搜索文件函数
------------

	function FindA(const AStr: PAnsiChar; const ACallback: TResultCallBack;
	  const ADir, AFilter: PAnsiChar; const Afrom: Integer = 0;
	  const ACount: Integer = 100; const ASpaceOr: Boolean = False;
	  const AWholeWords: Boolean = False; const AIncludeDir: Boolean = True;
	  const AIncludeFiles: Boolean = True; const ACaseSensitive: Boolean = False;
	  const ATimeoutMS: Word = 1000): Integer; stdcall;

     function FindW(const AStr: PWideChar; const ACallback: TResultCallBack;
	  const ADir, AFilter: PWideChar; const Afrom: Integer = 0;
	  const ACount: Integer = 100; const ASpaceOr: Boolean = False;
	  const AWholeWords: Boolean = False; const AIncludeDir: Boolean = True;
	  const AIncludeFiles: Boolean = True; const ACaseSensitive: Boolean = False;
	  const ATimeoutMS: Word = 1000): Integer; stdcall;

搜索文件函数
	参数 （搜索关键词，回调函数，制定目录（单个），后缀过滤（多个），开始结果位置，返回结果数量，
		是否匹配任一关键词，匹配全词，搜索目录，搜索文件，区分大小写，超时时间）
		
返回 	Integer				错误代码 （0=无错，<> 0 有错）

<table>
    <tr>
        <td>const AStr: PChar;	</td>
		<td>搜索关键词</td>
    </tr>
    <tr>
        <td>ACallback: TResultCallBack;</td>
		<td>回调函数</td>
    </tr>
    <tr>
        <td>const ADir: PChar;	</td>
		<td>制定目录（单个）</td>
    </tr>
    <tr>
        <td>const AFilter: PChar;	</td>
		<td>后缀过滤（多个）</td>
    </tr>
    <tr>
        <td>const ACount: Integer = 100;</td>
		<td>返回结果数量</td>
    </tr>
    <tr>
        <td>const Afrom: Integer = 0; </td>
		<td>开始结果位置</td>
    </tr>
    <tr>
        <td>const ASpaceOr: Boolean = False; </td>
		<td>是否匹配任一关键词</td>
    </tr>
    <tr>
        <td>const AWholeWords: Boolean = False;</td>
		<td>匹配全词</td>
    </tr>
    <tr>
        <td>const ACaseSensitive: Boolean = False; </td>
		<td>区分大小写</td>
    </tr>
	<tr>
        <td>const AIncludeDir: Boolean = True; </td>
		<td>搜索目录</td>
    </tr>
    <tr>
        <td>const AIncludeFiles: Boolean = True;</td>
		<td>搜索文件</td>
    </tr>
    <tr>
        <td>const ATimeoutMS: Word = 1000</td>
		<td>超时时间</td>
    </tr>
</table>
		

返回值
------

<table>
    <tr>
        <td>ERR_OK</td>
        <td>0</td>		
		<td>无错</td>		
    </tr>
    <tr>
        <td>ERR_TIMEOUT</td>
        <td>1</td>		
		<td>超时</td>		
    </tr>
    <tr>
        <td>ERR_FINDER_NOT_RUN</td>
        <td>2</td>		
		<td>Finder没有运行</td>		
    </tr>
    <tr>
        <td>ERR_COMM</td>
        <td>3</td>		
		<td>通信出错</td>		
    </tr>
    <tr>
        <td>ERR_FINDER_VER</td>
        <td>4</td>		
		<td>Finder版本不支持</td>		
    </tr>
    <tr>
        <td>ERR_FINDER_NOT_INSTALLED</td>
        <td>9</td>		
		<td>Finder没有安装</td>		
    </tr>
    <tr>
        <td>ERR_FINDER_INITIALIZING</td>
        <td>10</td>		
		<td>Finder正在初始化当中</td>		
    </tr>
    <tr>
        <td>ERR_UNKNOWN</td>
        <td>99</td>		
		<td>未知错误</td>		
    </tr>
	
</table>

  
LaunchFinder <a id="launchfinder" ></a>
============	  
	  
	function LaunchFinder: Boolean; stdcall;
	
启动Finder

返回
----

是否启动成功


	
IsFinderRunning <a id="isfinderrunning" ></a>
===============	
function IsFinderRunning: Boolean; stdcall;

Finder是否已经在运行

返回
----

Finder是否已经在运行



CheckRequirement <a id="checkrequirement" ></a>
================
function CheckRequirement: Integer; stdcall;	  

监测调用环境，比如Finder是否存在

返回
----

返回错误值，参见Find函数返回值。


C++ 例子：
--------------


      // cppdemo.cpp : Defines the entry point for the console application.
      //
      
      #include "stdafx.h"
      #include "FinderSDK.h"
      
      TFNfind             find             = (TFNfind)GetProcAddress(LoadLibrary(__T("finderlib.dll")),FNFind);
      TFNCheckRequirement CheckRequirement = (TFNCheckRequirement)GetProcAddress(LoadLibrary(__T("finderlib.dll")),FNCheckRequirement);
      TFNLaunchFinder     LaunchFinder     = (TFNLaunchFinder)GetProcAddress(LoadLibrary(__T("finderlib.dll")),FNLaunchFinder);
      
      
      std::string WChar2Ansi(LPCWSTR pwszSrc)
      {
      	int nLen = WideCharToMultiByte(CP_ACP, 0, pwszSrc, -1, NULL, 0, NULL, NULL);
      	if (nLen<= 0) return std::string("");
      	char* pszDst = new char[nLen];
      	if (NULL == pszDst) return std::string("");
      	WideCharToMultiByte(CP_ACP, 0, pwszSrc, -1, pszDst, nLen, NULL, NULL);
      	pszDst[nLen -1] = 0;
      	std::string strTemp(pszDst);
      	delete [] pszDst;
      	return strTemp;
      }
      
      void __stdcall callback(TCHAR** buffer,int bufferCount, int totalCount,int ErrorCode){
      
      	for(int i=0; i<bufferCount; i++){
             //wprintf(("%s\r\n"),*buffer);
      	   //_tprintf(__T("%s\r\n"),*buffer);
      	   //_tprintf(*buffer);
      	   
      #ifdef UNICODE
      		string str = WChar2Ansi(*buffer);
      #else
      		string str(*buffer);
      #endif
      	   //str = str.substr(0,10);
      	   cout <<str<<std::endl;
      	   buffer++;
      	}
      	 //sprintf();
      
      }
      /*
      执行例子
      cppdemo "*" "c:\windows;d:\;d:\;e:\" "c:\windows\system32" ".rar;.zip;.kz;.7zip;.7z"
      
      */
      int _tmain(int argc, _TCHAR* argv[])
      {
      	int      req = CheckRequirement();
      	switch(req){
      	case ERR_OK:{
      		if(find != NULL){
      			find((argc > 1)?argv[1]:(__T("")), 
      				callback, 
      				(argc > 2)?argv[2]:(__T("")), 
      				(argc > 3)?argv[3]:(__T("")), 
      				//(argc > 4)?argv[4]:(__T("")), 
                      __T(""),
      				1000,
      				0,
      				true,
      				false,
      				false,
      				false,
      				true,
      				1000); 
      		}				   
      				}
      				break;
      	case ERR_FINDER_NOT_RUN:
      		//LaunchFinder();
      		break;
      	}
          
      	return 0;
      }


	
	
Delphi 例子
--------------
接受命令行参数为搜索条件，在C盘搜索
	
	
	procedure FindCallback(Buffer: PPChar; BufferCount: Integer; TotalCount: Integer;
		ErrorCode: Integer); stdcall;
	var
	  i : Integer;
	begin
	  OutputDebugString(PChar(Format('Buffer=%x, Count = %d',[Integer(Buffer), BufferCount])));
	  Writeln('Buffer Count', BufferCount);
	  Writeln('Result TotalCount', TotalCount);
	  Writeln('Error Code', ErrorCode);
	  Writeln('Result');
	  for i :=0 to  BufferCount - 1 do
	  begin
		Writeln(StrPas(PChar(Buffer^)));
		Inc(Buffer);
	  end;
	end;
	var
	  r : string;
	begin
	  try
		{ TODO -oUser -cConsole Main : Insert code here }

		Find(
		  ParamStr(1),
		  @FindCallback,
		  'c:\',
		  '',
		  0, 20
		  );
		Readln(r);
	  except
		on E:Exception do
		  Writeln(E.Classname, ': ', E.Message);
	  end;
	end.	
C# 例子
--------------
      using System;
      using System.Collections.Generic;
      using System.Linq;
      using System.Text;
      using System.Runtime.InteropServices; 
      
      namespace CSharpDemo
      {
          class Program
          {
      
              public delegate void TFNFindCallback (IntPtr buffer,int bufferCount, int totalCount,int ErrorCode);
              [DllImport("finderlib64.dll", EntryPoint = "FindW", CharSet = CharSet.Unicode)]
              public static extern   int Find64(String AStr,
      									TFNFindCallback ACallback,
      									String ADir, 
      									String AExcludeDir,
      									String AFilter,
      									int ACount,
      									int Afrom,
      									bool ASpaceOr,
      									bool AWholeWords,
      									bool ACaseSensitive,
      									bool AIncludeDir,
      									bool AIncludeFiles,
      									UInt16 ATimeoutMS);
              [DllImport("finderlib.dll", EntryPoint = "FindW", CharSet = CharSet.Unicode)]
              public static extern int Find(String AStr,
                                                  TFNFindCallback ACallback,
                                                  String ADir,
                                                  String AExcludeDir,
                                                  String AFilter,
                                                  int ACount,
                                                  int Afrom,
                                                  bool ASpaceOr,
                                                  bool AWholeWords,
                                                  bool ACaseSensitive,
                                                  bool AIncludeDir,
                                                  bool AIncludeFiles,
                                                  UInt16 ATimeoutMS);
              
              static void Main(string[] args)
              {
      
                  if (IntPtr.Size == 4)//32位系统
                    Find("*.exe", FindCallback, "", "", "", 1000, 0, true, false, false, false, true, 1000);
                  else if(IntPtr.Size == 8)//64位系统
                    Find64("*.exe", FindCallback, "", "", "", 1000, 0, true, false, false, false, true, 1000);
              }
      
      
              public static String[] getStringArrayFromPPChar(IntPtr buffer,int bufferCount, Encoding  e)
              {
                  String[] ret = new String[bufferCount];
                  for (int i = 0; i < bufferCount; i++)
                  {
                      IntPtr cur = Marshal.ReadIntPtr(buffer, IntPtr.Size * i);
                      List<byte> b = new List<byte>();
                      byte cb = 0;
                      byte lb = 0;
                      int pos = 0;
                      while (true)
                      {
                          cb = Marshal.ReadByte(cur, pos);
                          pos++;
                          b.Add(cb);
      
                          if (e.IsSingleByte)
                          {
                              if(cb == 0)
                                  break;
                          }
                          else
                          if ((b.Count % 2) == 0 && cb == 0 && lb == 0)
                          {
                              break;
                          }
                          lb = cb;
                      }
                      ret[i] = e.GetString(b.ToArray());
                  }
                  return ret;
              }
      
              public static void FindCallback(IntPtr buffer, int bufferCount, int totalCount, int ErrorCode)
              {
                  Encoding e = Encoding.Unicode;
                  String[] filenames = getStringArrayFromPPChar(buffer, bufferCount, e);
                  for(int i=0; i< filenames.Length; i++){
                      Console.WriteLine(filenames[i]);
                  }
              }
          }
      
      
      }
